//package com.ali.whatsappplus.data.remote////import android.util.Log//import com.ali.whatsappplus.domain.common.Result//import com.ali.whatsappplus.util.Constants//import com.cometchat.chat.constants.CometChatConstants//import com.cometchat.chat.core.CometChat//import com.cometchat.chat.exceptions.CometChatException//import okhttp3.Call//import okhttp3.Callback//import okhttp3.Headers//import okhttp3.MediaType.Companion.toMediaType//import okhttp3.OkHttpClient//import okhttp3.Request//import okhttp3.RequestBody//import okhttp3.Response//import org.json.JSONObject//import java.io.IOException//import java.util.concurrent.TimeUnit//import kotlin.math.log////class ApiService private constructor() {////    private val AUTH_TOKEN_URL = "/users/%s/auth_tokens"//    private val BASE_URL = "https://${Constants.APP_ID}.apiclient-${Constants.REGION}.cometchat.io/v3"//    private val DELETE_MESSAGE_URL = "/messages/%s"//    private val RESET_GROUP_CONVERSATION_URL = "/groups/%s/conversation"//    private val RESET_USER_CONVERSATION_URL = "/users/%s/conversation"//    private val CONTENT_TYPE = "Content-Type"//    private val CONTENT_TYPE_JSON_VALUE = "application/json"//    private val ACCEPT = "accept"////    private val okHttpClient: OkHttpClient = OkHttpClient().newBuilder()//        .connectTimeout(15, TimeUnit.SECONDS)//        .readTimeout(15, TimeUnit.SECONDS)//        .writeTimeout(15, TimeUnit.SECONDS)//        .retryOnConnectionFailure(true)//        .build()////    companion object {//        private var instance: ApiService? = null////        fun getInstance(): ApiService {//            if (instance == null) {//                instance = ApiService()//            }//            return instance!!//        }//    }////    fun login(uid: String, apiKey: String, listener: ApiListener) {//        val requestBody = okhttp3.FormBody.Builder()//            .build()////        val header = Headers.Builder()//            .add("apiKey", apiKey)//            .add("Accept", "application/json")//            .add("Content-Type", "application/json")//            .build()////        val authTokenRequest = Request.Builder()//            .url(BASE_URL + String.format(AUTH_TOKEN_URL, uid))//            .post(requestBody)//            .headers(header)//            .build()////        makeApiCall(authTokenRequest, listener)//    }////    fun login(authToken: String, listener: ApiListener) {//        val baseUrl = "https://${Constants.APP_ID}.api-${Constants.REGION}.cometchat.io/v3"//        val requestBody = okhttp3.FormBody.Builder()//            .build()//    }////    fun resetUserConversation(uid: String, listener: ApiListener<Unit>) {//        val header = Headers.Builder()//            .add("appid", Constants.APP_ID)//            .add("authToken", CometChat.getUserAuthToken())//            .add(ACCEPT, CONTENT_TYPE_JSON_VALUE)//            .add(CONTENT_TYPE, CONTENT_TYPE_JSON_VALUE)//            .build()////        val url = BASE_URL + String.format(RESET_USER_CONVERSATION_URL, uid)//        val request = Request.Builder()//            .url(url)//            .headers(header)//            .build()////        // Start loading state//        listener.onResponse(Result.Loading)////        makeApiCall(request, object : ApiListener<String> {//            override fun onResponse(result: Result<String>) {//                when (result) {//                    is Result<Any?>.Success -> listener.onResponse(Resource.Success(Unit)) // No data, just success//                    is Result<Any?>.Error -> listener.onResponse(Resource.Error(result.message))//                    is Result<Any?>.Loading -> {} // Ignore loading since we already set it//                }//            }//        })//    }////    fun deleteMessage(msgId: String, isParmanent: Boolean, listener: ApiListener) {//        val mediaType = "application/json".toMediaType()////        val header = Headers.Builder()//            .add("appid", Constants.APP_ID)//            .add("authtoken", CometChat.getUserAuthToken())//            .add(ACCEPT, CONTENT_TYPE_JSON_VALUE)//            .add(CONTENT_TYPE, CONTENT_TYPE_JSON_VALUE)//            .build()////        val requestBody =//            if (isParmanent) RequestBody.create(mediaType, "{\"permanent\":true}") else null////        val deleteRequest = Request.Builder()//            .url(BASE_URL + String.format(DELETE_MESSAGE_URL, msgId))//            /*.apply {//                if (requestBody != null) delete(requestBody) else delete()//            }*///            .delete()//            .headers(header)//            .build()////        Log.i("API SERVICE", "deleteMessage: ${deleteRequest.url}")////        makeApiCall(deleteRequest, listener)//    }////    private fun makeApiCall(request: Request, listener: ApiListener<JSONObject>) {//        okHttpClient.newCall(request).enqueue(object : Callback {//            override fun onFailure(call: Call, e: IOException) {//                listener.onResponse(Result.Error("OKHTTP Failure ",e))//            }////            override fun onResponse(call: Call, response: Response) {//                val body = response.body?.string()//                if (body != null) {//                    try {//                        val responseJson = JSONObject(body)//                        listener.onResponse(Result.Success(responseJson))//                    } catch (e: Exception) {//                        listener.onResponse(Result.Error(e))//                    }//                } else {//                    listener.onResponse(Result.Error("Empty Response Received"))//                }//            }//        })//    }////    @Throws(IOException::class)//    private fun handleApiResponse(//        responseCode: Int,//        responseBody: String,//        listener: ApiListener//    ) {//        try {//            if (responseCode == CometChatConstants.ResponseKeys.CODE_REQUEST_OK) {//                listener.onResponse(responseBody, null)//            } else if (responseCode == CometChatConstants.ResponseKeys.CODE_BAD_REQUEST) {//                val mainObject = JSONObject(responseBody)//                val errorObject =//                    mainObject.getJSONObject(CometChatConstants.ResponseKeys.KEY_ERROR)//                var details: String? = null//                if (errorObject.has(CometChatConstants.ResponseKeys.KEY_ERROR_DETAILS)) {//                    details =//                        errorObject.getJSONObject(CometChatConstants.ResponseKeys.KEY_ERROR_DETAILS)//                            .toString()//                }//                listener.onResponse(null, details)//            } else if (responseCode == CometChatConstants.ResponseKeys.CODE_BAD_GATEWAY || responseCode == CometChatConstants.ResponseKeys.CODE_SERVICE_UNAVAILABLE || responseCode == CometChatConstants.ResponseKeys.CODE_GATEWAY_TIME_OUT) {//                listener.onResponse(//                    null, "Something went wrong!"//                )//            } else {//                val mainObject = JSONObject(responseBody)//                val errorObject =//                    mainObject.getJSONObject(CometChatConstants.ResponseKeys.KEY_ERROR)//                val cometChatException = CometChatException(//                    errorObject.getString(CometChatConstants.ResponseKeys.KEY_ERROR_CODE),//                    errorObject.getString(CometChatConstants.ResponseKeys.KEY_ERROR_MESSAGE)//                )//                /*if (cometChatException.code.equals(//                        CometChatConstants.Errors.ERROR_API_AUTH_ERR_AUTH_TOKEN_NOT_FOUND,//                        ignoreCase = true//                    )//                ) {//                    // CometChat.internalLogout(true)//                }*///                listener.onResponse(null, cometChatException.message)//            }//        } catch (e: Exception) {//            listener.onResponse(//                null,//                "Something went wrong! ${e.message}"//            )//        }//    }////    interface ApiListener<T> {//        fun onResponse(result: Result<T>)//    }//}